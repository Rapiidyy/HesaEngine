<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.SQLite</name>
    </assembly>
    <members>
        <member name="T:System.Data.SQLite.AssemblySourceIdAttribute">
            <summary>
            Defines a source code identifier custom attribute for an assembly
            manifest.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AssemblySourceIdAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of this attribute class using the specified
            source code identifier value.
            </summary>
            <param name="value">
            The source code identifier value to use.
            </param>
        </member>
        <member name="P:System.Data.SQLite.AssemblySourceIdAttribute.SourceId">
            <summary>
            Gets the source code identifier value.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.AssemblySourceTimeStampAttribute">
            <summary>
            Defines a source code time-stamp custom attribute for an assembly
            manifest.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AssemblySourceTimeStampAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of this attribute class using the specified
            source code time-stamp value.
            </summary>
            <param name="value">
            The source code time-stamp value to use.
            </param>
        </member>
        <member name="P:System.Data.SQLite.AssemblySourceTimeStampAttribute.SourceTimeStamp">
            <summary>
            Gets the source code time-stamp value.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteLogCallback">
             <summary>
             This is the method signature for the SQLite core library logging callback
             function for use with sqlite3_log() and the SQLITE_CONFIG_LOG.
            
             WARNING: This delegate is used more-or-less directly by native code, do
                      not modify its type signature.
             </summary>
             <param name="pUserData">
             The extra data associated with this message, if any.
             </param>
             <param name="errorCode">
             The error code associated with this message.
             </param>
             <param name="pMessage">
             The message string to be logged.
             </param>
        </member>
        <member name="T:System.Data.SQLite.SQLite3">
            <summary>
            This class implements SQLiteBase completely, and is the guts of the code that interop's SQLite with .NET
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteBase">
            <summary>
            This internal class provides the foundation of SQLite support.  It defines all the abstract members needed to implement
            a SQLite data provider, and inherits from SQLiteConvert which allows for simple translations of string to and from SQLite.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConvert">
            <summary>
            This base class provides datatype conversion services for the SQLite provider.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FallbackDefaultDbType">
            <summary>
            The fallback default database type when one cannot be obtained from an
            existing connection instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FullFormat">
            <summary>
            The format string for DateTime values when using the InvariantCulture or CurrentCulture formats.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FallbackDefaultTypeName">
            <summary>
            The fallback default database type name when one cannot be obtained from
            an existing connection instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.UnixEpoch">
            <summary>
            The value for the Unix epoch (e.g. January 1, 1970 at midnight, in UTC).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.OleAutomationEpochAsJulianDay">
            <summary>
            The value of the OLE Automation epoch represented as a Julian day.  This
            field cannot be removed as the test suite relies upon it.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.MinimumJd">
            <summary>
            This is the minimum Julian Day value supported by this library
            (148731163200000).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.MaximumJd">
            <summary>
            This is the maximum Julian Day value supported by this library
            (464269060799000).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormats">
            <summary>
            An array of ISO-8601 DateTime formats that we support parsing.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatUtc">
            <summary>
            The internal default format for UTC DateTime values when converting
            to a string.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatLocal">
            <summary>
            The internal default format for local DateTime values when converting
            to a string.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._utf8">
            <summary>
            An UTF-8 Encoding instance, so we can convert strings to and from UTF-8
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormat">
            <summary>
            The default DateTime format for this instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeKind">
            <summary>
            The default DateTimeKind for this instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatString">
            <summary>
            The default DateTime format string for this instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.#ctor(System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Initializes the conversion class
            </summary>
            <param name="fmt">The default date/time format to use for this instance</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="fmtString">The DateTime format string to use.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUTF8(System.String)">
            <summary>
            Converts a string to a UTF-8 encoded byte array sized to include a null-terminating character.
            </summary>
            <param name="sourceText">The string to convert to UTF-8</param>
            <returns>A byte array containing the converted string plus an extra 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUTF8(System.DateTime)">
            <summary>
            Convert a DateTime to a UTF-8 encoded, zero-terminated byte array.
            </summary>
            <remarks>
            This function is a convenience function, which first calls ToString() on the DateTime, and then calls ToUTF8() with the
            string result.
            </remarks>
            <param name="dateTimeValue">The DateTime to convert.</param>
            <returns>The UTF-8 encoded string, including a 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.UTF8ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.isValidJd(System.Int64)">
            <summary>
            Checks if the specified <see cref="T:System.Int64"/> is within the
            supported range for a Julian Day value.
            </summary>
            <param name="jd">
            The Julian Day value to check.
            </param>
            <returns>
            Non-zero if the specified Julian Day value is in the supported
            range; otherwise, zero.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DoubleToJd(System.Double)">
            <summary>
            Converts a Julian Day value from a <see cref="T:System.Double"/> to an
            <see cref="T:System.Int64"/>.
            </summary>
            <param name="julianDay">
            The Julian Day <see cref="T:System.Double"/> value to convert.
            </param>
            <returns>
            The resulting Julian Day <see cref="T:System.Int64"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.JdToDouble(System.Int64)">
            <summary>
            Converts a Julian Day value from an <see cref="T:System.Int64"/> to a
            <see cref="T:System.Double"/>.
            </summary>
            <param name="jd">
            The Julian Day <see cref="T:System.Int64"/> value to convert.
            </param>
            <returns>
            The resulting Julian Day <see cref="T:System.Double"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.computeYMD(System.Int64,System.Nullable{System.DateTime})">
            <summary>
            Converts a Julian Day value to a <see cref="T:System.DateTime"/>.
            This method was translated from the "computeYMD" function in the
            "date.c" file belonging to the SQLite core library.
            </summary>
            <param name="jd">
            The Julian Day value to convert.
            </param>
            <param name="badValue">
            The <see cref="T:System.DateTime"/> value to return in the event that the
            Julian Day is out of the supported range.  If this value is null,
            an exception will be thrown instead.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that contains the year, month, and
            day values that are closest to the specified Julian Day value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.computeHMS(System.Int64,System.Nullable{System.DateTime})">
            <summary>
            Converts a Julian Day value to a <see cref="T:System.DateTime"/>.
            This method was translated from the "computeHMS" function in the
            "date.c" file belonging to the SQLite core library.
            </summary>
            <param name="jd">
            The Julian Day value to convert.
            </param>
            <param name="badValue">
            The <see cref="T:System.DateTime"/> value to return in the event that the
            Julian Day value is out of the supported range.  If this value is
            null, an exception will be thrown instead.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> value that contains the hour, minute, and
            second, and millisecond values that are closest to the specified
            Julian Day value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.computeJD(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a Julian Day value.
            This method was translated from the "computeJD" function in
            the "date.c" file belonging to the SQLite core library.
            Since the range of Julian Day values supported by this method
            includes all possible (valid) values of a <see cref="T:System.DateTime"/>
            value, it should be extremely difficult for this method to
            raise an exception or return an undefined result.
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> value to convert.  This value
            will be within the range of <see cref="F:System.DateTime.MinValue"/>
            (00:00:00.0000000, January 1, 0001) to
            <see cref="F:System.DateTime.MaxValue"/> (23:59:59.9999999, December
            31, 9999).
            </param>
            <returns>
            The nearest Julian Day value corresponding to the specified
            <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.String)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats -OR-
            the DateTimeFormatString if one was provided, an exception will
            be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.String,System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Converts a string into a DateTime, using the specified DateTimeFormat,
            DateTimeKind and DateTimeFormatString.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats -OR-
            the DateTimeFormatString if one was provided, an exception will
            be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <param name="format">The SQLiteDateFormats to use.</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Double)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Double,System.DateTimeKind)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <param name="kind">The DateTimeKind to use.</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.UnixEpochToDateTime(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified number of seconds from the Unix epoch into a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="seconds">
            The number of whole seconds since the Unix epoch.
            </param>
            <param name="kind">
            Either Utc or Local time.
            </param>
            <returns>
            The new <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TicksToDateTime(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified number of ticks since the epoch into a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="ticks">
            The number of whole ticks since the epoch.
            </param>
            <param name="kind">
            Either Utc or Local time.
            </param>
            <returns>
            The new <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToJulianDay(System.DateTime)">
            <summary>
            Converts a DateTime struct to a JulianDay double
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The JulianDay value the Datetime represents</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUnixEpoch(System.DateTime)">
            <summary>
            Converts a DateTime struct to the whole number of seconds since the
            Unix epoch.
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The whole number of seconds since the Unix epoch</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDateTimeKindFormat(System.DateTimeKind,System.String)">
            <summary>
            Returns the DateTime format string to use for the specified DateTimeKind.
            If <paramref name="formatString" /> is not null, it will be returned verbatim.
            </summary>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>
            The DateTime format string to use for the specified DateTimeKind.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.DateTime)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <returns>Either a string containing the long integer number of 100-nanosecond units since System.DateTime.MinValue, a
            Julian day double, an integer number of seconds since the Unix epoch, a culture-independent formatted date and time
            string, a formatted date and time string in the current culture, or an ISO8601-format date/time string.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.DateTime,System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <param name="format">The SQLiteDateFormats to use.</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>Either a string containing the long integer number of 100-nanosecond units since System.DateTime.MinValue, a
            Julian day double, an integer number of seconds since the Unix epoch, a culture-independent formatted date and time
            string, a formatted date and time string in the current culture, or an ISO8601-format date/time string.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.IntPtr,System.Int32)">
            <summary>
            Internal function to convert a UTF-8 encoded IntPtr of the specified length to a DateTime.
            </summary>
            <remarks>
            This is a convenience function, which first calls ToString() on the IntPtr to convert it to a string, then calls
            ToDateTime() on the string to return a DateTime.
            </remarks>
            <param name="ptr">A pointer to the UTF-8 encoded string</param>
            <param name="len">The length in bytes of the string</param>
            <returns>The parsed DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.Split(System.String,System.Char)">
            <summary>
            Smart method of splitting a string.  Skips quoted elements, removes the quotes.
            </summary>
            <remarks>
            This split function works somewhat like the String.Split() function in that it breaks apart a string into
            pieces and returns the pieces as an array.  The primary differences are:
            <list type="bullet">
            <item><description>Only one character can be provided as a separator character</description></item>
            <item><description>Quoted text inside the string is skipped over when searching for the separator, and the quotes are removed.</description></item>
            </list>
            Thus, if splitting the following string looking for a comma:<br/>
            One,Two, "Three, Four", Five<br/>
            <br/>
            The resulting array would contain<br/>
            [0] One<br/>
            [1] Two<br/>
            [2] Three, Four<br/>
            [3] Five<br/>
            <br/>
            Note that the leading and trailing spaces were removed from each item during the split.
            </remarks>
            <param name="source">Source string to split apart</param>
            <param name="separator">Separator character</param>
            <returns>A string array of the split up elements</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.NewSplit(System.String,System.Char,System.Boolean,System.String@)">
            <summary>
            Splits the specified string into multiple strings based on a separator
            and returns the result as an array of strings.
            </summary>
            <param name="value">
            The string to split into pieces based on the separator character.  If
            this string is null, null will always be returned.  If this string is
            empty, an array of zero strings will always be returned.
            </param>
            <param name="separator">
            The character used to divide the original string into sub-strings.
            This character cannot be a backslash or a double-quote; otherwise, no
            work will be performed and null will be returned.
            </param>
            <param name="keepQuote">
            If this parameter is non-zero, all double-quote characters will be
            retained in the returned list of strings; otherwise, they will be
            dropped.
            </param>
            <param name="error">
            Upon failure, this parameter will be modified to contain an appropriate
            error message.
            </param>
            <returns>
            The new array of strings or null if the input string is null -OR- the
            separator character is a backslash or a double-quote -OR- the string
            contains an unbalanced backslash or double-quote character.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToStringWithProvider(System.Object,System.IFormatProvider)">
            <summary>
            Queries and returns the string representation for an object, using the
            specified (or current) format provider.
            </summary>
            <param name="obj">
            The object instance to return the string representation for.
            </param>
            <param name="provider">
            The format provider to use -OR- null if the current format provider for
            the thread should be used instead.
            </param>
            <returns>
            The string representation for the object instance -OR- null if the
            object instance is also null.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.Object,System.IFormatProvider,System.Boolean)">
            <summary>
            Attempts to convert an arbitrary object to the Boolean data type.
            Null object values are converted to false.  Throws an exception
            upon failure.
            </summary>
            <param name="obj">
            The object value to convert.
            </param>
            <param name="provider">
            The format provider to use.
            </param>
            <param name="viaFramework">
            If non-zero, a string value will be converted using the
            <see cref="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)"/>
            method; otherwise, the <see cref="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.String)"/>
            method will be used.
            </param>
            <returns>
            The converted boolean value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.Object)">
            <summary>
            Convert a value to true or false.
            </summary>
            <param name="source">A string or number representing true or false</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.Int32)">
            <summary>
            Converts an integer to a string that can be round-tripped using the
            invariant culture.
            </summary>
            <param name="value">
            The integer value to return the string representation for.
            </param>
            <returns>
            The string representation of the specified integer value, using the
            invariant culture.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.String)">
            <summary>
            Attempts to convert a <see cref="T:System.String"/> into a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="source">
            The <see cref="T:System.String"/> to convert, cannot be null.
            </param>
            <returns>
            The converted <see cref="T:System.Boolean"/> value.
            </returns>
            <remarks>
            The supported strings are "yes", "no", "y", "n", "on", "off", "0", "1",
            as well as any prefix of the strings <see cref="F:System.Boolean.FalseString"/>
            and <see cref="F:System.Boolean.TrueString"/>.  All strings are treated in a
            case-insensitive manner.
            </remarks>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.SQLiteTypeToType(System.Data.SQLite.SQLiteType)">
            <summary>
            Converts a SQLiteType to a .NET Type object
            </summary>
            <param name="t">The SQLiteType to convert</param>
            <returns>Returns a .NET Type object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeToDbType(System.Type)">
            <summary>
            For a given intrinsic type, return a DbType
            </summary>
            <param name="typ">The native type to convert</param>
            <returns>The corresponding (closest match) DbType</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToColumnSize(System.Data.DbType)">
            <summary>
            Returns the ColumnSize for the given DbType
            </summary>
            <param name="typ">The DbType to get the size of</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDefaultTypeName(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Determines the default database type name to be used when a
            per-connection value is not available.
            </summary>
            <param name="connection">
            The connection context for type mappings, if any.
            </param>
            <returns>
            The default database type name to use.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DefaultTypeNameWarning(System.Data.DbType,System.Data.SQLite.SQLiteConnectionFlags,System.String)">
            <summary>
            If applicable, issues a trace log message warning about falling back to
            the default database type name.
            </summary>
            <param name="dbType">
            The database value type.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
            <param name="typeName">
            The textual name of the database type.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DefaultDbTypeWarning(System.String,System.Data.SQLite.SQLiteConnectionFlags,System.Nullable{System.Data.DbType})">
            <summary>
            If applicable, issues a trace log message warning about falling back to
            the default database value type.
            </summary>
            <param name="typeName">
            The textual name of the database type.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
            <param name="dbType">
            The database value type.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToTypeName(System.Data.SQLite.SQLiteConnection,System.Data.DbType,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            For a given database value type, return the "closest-match" textual database type name.
            </summary>
            <param name="connection">The connection context for custom type mappings, if any.</param>
            <param name="dbType">The database value type.</param>
            <param name="flags">The flags associated with the parent connection object.</param>
            <returns>The type name or an empty string if it cannot be determined.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToType(System.Data.DbType)">
            <summary>
            Convert a DbType to a Type
            </summary>
            <param name="typ">The DbType to convert from</param>
            <returns>The closest-match .NET type</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeToAffinity(System.Type)">
            <summary>
            For a given type, return the closest-match SQLite TypeAffinity, which only understands a very limited subset of types.
            </summary>
            <param name="typ">The type to evaluate</param>
            <returns>The SQLite type affinity for that type.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetSQLiteDbTypeMap">
            <summary>
            Builds and returns a map containing the database column types
            recognized by this provider.
            </summary>
            <returns>
            A map containing the database column types recognized by this
            provider.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.IsStringDbType(System.Data.DbType)">
            <summary>
            Determines if a database type is considered to be a string.
            </summary>
            <param name="type">
            The database type to check.
            </param>
            <returns>
            Non-zero if the database type is considered to be a string, zero
            otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.SettingValueToString(System.Object)">
            <summary>
            Determines and returns the runtime configuration setting string that
            should be used in place of the specified object value.
            </summary>
            <param name="value">
            The object value to convert to a string.
            </param>
            <returns>
            Either the string to use in place of the object value -OR- null if it
            cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDefaultDbType(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Determines the default <see cref="T:System.Data.DbType"/> value to be used when a
            per-connection value is not available.
            </summary>
            <param name="connection">
            The connection context for type mappings, if any.
            </param>
            <returns>
            The default <see cref="T:System.Data.DbType"/> value to use.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetStringOrNull(System.Object)">
            <summary>
            Converts the object value, which is assumed to have originated
            from a <see cref="T:System.Data.DataRow"/>, to a string value.
            </summary>
            <param name="value">
            The value to be converted to a string.
            </param>
            <returns>
            A null value will be returned if the original value is null -OR-
            the original value is <see cref="F:System.DBNull.Value"/>.  Otherwise,
            the original value will be converted to a string, using its
            (possibly overridden) <see cref="M:System.Object.ToString"/> method and
            then returned.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeNull(System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.DBNull"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.DBNull"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeInt64(System.String)">
            <summary>
            Determines if the specified textual value appears to be an
            <see cref="T:System.Int64"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like an <see cref="T:System.Int64"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeDouble(System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.Double"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeDateTime(System.Data.SQLite.SQLiteConvert,System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="convert">
            The <see cref="T:System.Data.SQLite.SQLiteConvert"/> object instance configured with
            the chosen <see cref="T:System.DateTime"/> format.
            </param>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.DateTime"/> in the
            configured format, zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeNameToDbType(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            For a given textual database type name, return the "closest-match" database type.
            This method is called during query result processing; therefore, its performance
            is critical.
            </summary>
            <param name="connection">The connection context for custom type mappings, if any.</param>
            <param name="typeName">The textual name of the database type to match.</param>
            <param name="flags">The flags associated with the parent connection object.</param>
            <returns>The .NET DBType the text evaluates to.</returns>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBase.COR_E_EXCEPTION">
            <summary>
            The error code used for logging exceptions caught in user-provided
            code.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.IsReadOnly(System.String)">
            <summary>
            Returns non-zero if this connection to the database is read-only.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetMemoryStatus(System.Boolean)">
            <summary>
            Sets the status of the memory usage tracking subsystem in the SQLite core library.  By default, this is enabled.
            If this is disabled, memory usage tracking will not be performed.  This is not really a per-connection value, it is
            global to the process.
            </summary>
            <param name="value">Non-zero to enable memory usage tracking, zero otherwise.</param>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.ReleaseMemory">
            <summary>
            Attempts to free as much heap memory as possible for the database connection.
            </summary>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Shutdown">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different config options.
            We depend on auto initialization to recover.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.IsOpen">
            <summary>
            Determines if the associated native connection handle is open.
            </summary>
            <returns>
            Non-zero if a database connection is open.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetFileName(System.String)">
            <summary>
            Returns the fully qualified path and file name for the currently open
            database, if any.
            </summary>
            <param name="dbName">
            The name of the attached database to query.
            </param>
            <returns>
            The fully qualified path and file name for the currently open database,
            if any.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Open(System.String,System.String,System.Data.SQLite.SQLiteConnectionFlags,System.Data.SQLite.SQLiteOpenFlagsEnum,System.Int32,System.Boolean)">
            <summary>
            Opens a database.
            </summary>
            <remarks>
            Implementers should call SQLiteFunction.BindFunctions() and save the array after opening a connection
            to bind all attributed user-defined functions and collating sequences to the new connection.
            </remarks>
            <param name="strFilename">The filename of the database to open.  SQLite automatically creates it if it doesn't exist.</param>
            <param name="vfsName">The name of the VFS to use -OR- null to use the default VFS.</param>
            <param name="connectionFlags">The flags associated with the parent connection object</param>
            <param name="openFlags">The open flags to use when creating the connection</param>
            <param name="maxPoolSize">The maximum size of the pool for the given filename</param>
            <param name="usePool">If true, the connection can be pulled from the connection pool</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Close(System.Boolean)">
            <summary>
            Closes the currently-open database.
            </summary>
            <remarks>
            After the database has been closed implemeters should call SQLiteFunction.UnbindFunctions() to deallocate all interop allocated
            memory associated with the user-defined functions and collating sequences tied to the closed connection.
            </remarks>
            <param name="canThrow">Non-zero if the operation is allowed to throw exceptions, zero otherwise.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetTimeout(System.Int32)">
            <summary>
            Sets the busy timeout on the connection.  SQLiteCommand will call this before executing any command.
            </summary>
            <param name="nTimeoutMS">The number of milliseconds to wait before returning SQLITE_BUSY</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetLastError">
            <summary>
            Returns the text of the last error issued by SQLite
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetLastError(System.S